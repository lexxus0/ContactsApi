openapi: 3.1.0
info:
  version: 1.0.0
  title: Contacts App
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: API documentation for Contacts App
tags:
  - name: Contacts
    description: Operations about contacts
  - name: Auth
    description: Operations about user authentication
servers:
  - url: http://localhost:3000/api/v1
paths:
  /auth/register:
    post:
      tags:
        - Auth
      operationId: registerUser
      summary: Register a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /auth/login:
    post:
      tags:
        - Auth
      operationId: loginUser
      summary: Login user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /auth/send-reset-email:
    post:
      tags:
        - Auth
      operationId: sendResetEmail
      summary: Send password reset email
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: johndoe@example.com
      responses:
        '200':
          description: Reset email sent successfully
        '400':
          description: Bad Request
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /auth/reset-pwd:
    post:
      tags:
        - Auth
      operationId: resetPassword
      summary: Reset user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  description: JWT token from reset email
                password:
                  type: string
                  example: newstrongpassword123
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Bad Request
        '401':
          description: Token is expired or invalid
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /auth/logout:
    post:
      tags:
        - Auth
      operationId: logoutUser
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User logged out successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /contacts:
    get:
      tags:
        - contacts
      operationId: getContacts
      summary: Get all contacts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Contacts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

    post:
      tags:
        - Contacts
      operationId: createContact
      summary: Create a new contact
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - phoneNumber
                - email
                - isFavourite
                - contactType
              properties:
                name:
                  type: string
                  example: John Doe
                phoneNumber:
                  type: string
                  example: 123113355
                email:
                  type: string
                  example: johndoe@example.com
                isFavourite:
                  type: boolean
                  example: true
                contactType:
                  type: string
                  enum: ['work', 'home', 'personal']
                  example: personal
                photo:
                  type: string
                  format: binary
      responses:
        '201':
          description: Contact created successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /contacts/{id}:
    get:
      tags:
        - Contacts
      operationId: getContactById
      summary: Get contact by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contact retrieved successfully
        '401':
          description: Unauthorized
        '404':
          description: Contact not found
        '500':
          description: Internal Server Error

    patch:
      tags:
        - Contacts
      operationId: updateContact
      summary: Update contact
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                phoneNumber:
                  type: string
                email:
                  type: string
                isFavourite:
                  type: boolean
                contactType:
                  type: string
                  enum: ['work', 'home', 'personal']
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Contact updated successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Contact not found
        '500':
          description: Internal Server Error

    delete:
      tags:
        - Contacts
      operationId: deleteContact
      summary: Delete contact by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Contact deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Contact not found
        '500':
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    UserRegistration:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: strongpassword123

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: strongpassword123

    Contact:
      type: object
      properties:
        name:
          type: string
          example: 'John Doe'
        phoneNumber:
          type: number
          example: 123113355
        email:
          type: string
          example: johndoe@example.com
        isFavourite:
          type: boolean
          example: true
        contactType:
          type: string
          example: 'personal'
        photo:
          type: string
          example: 'http://example.com/photo.jpg'
